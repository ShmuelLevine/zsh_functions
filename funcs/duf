duf(){

   #  Set the option GLOB_DOTS to allow a single glob expression *(.)
   #  to find all files in this directory, regardless of whether they
   #  start with a . (dot)
   
   setopt GLOB_DOTS

   #  Display status information.  The escape codes save the cursor
   #  position and move the cursor up a line, respectively.  This
   #  allows this script to replace the directory name each time.
   
   echo -e "Calculating Size of Directory:\t\t\033[s./\033[A"

   #  Obtain a unique name for a temporary file to store the values of
   #  each directory.  In order to display the name of the current
   #  directory being scanned, it is necessary to call du separately
   #  for each directory.  Redirecting the output to a temporary file
   #  allows the script to concatenate all of the results at the end,
   #  similar to a call of du -sh *. Save in /tmp to prevent problems
   #  with directory permissions
   
   tmpfile=/tmp/${SECONDS}_du_tmp

   #  The glob will fail with an error message if there are no files --
   #  checking for files before the call prevents unnecessary error
   #  messages
   
   [[ -n $(find . -maxdepth 1 -type f) ]] && sudo du -skx *(.) > $tmpfile

   #  Similar to the previous statement, the stat command checks for
   #  subdirectories, by counting the number of hardlinks in this
   #  directory.  There will be 2 if there are no subdirectories --
   #  each subdirectory increases the number by 1.  Files do not
   #  affect this number.

   # N.B. The stat command did not work on FreeBSD.  Instead, use find to 
   #      check for any directory entries with a minimum depth of 1 (i.e. 
   #      to exclude finding . and a maximum depth of 1 (we are only
   #      interested in subdirectories of the current directory) 
   
      [[ -n $(find . -mindepth 1 -maxdepth 1 -type d) ]] && \
   for i in *(/) ; do

   #  These escape codes move the cursor to the saved position (where
   #  the directory name is to be displayed), erase from the cursor to
   #  the end of the current line, and move up a line (after the
   #  directory name is displayed), respectively
   
   echo -e "\033[u\033[0K${i}\033[A"
   sudo du -skx ${i} >> $tmpfile;
   done;

   # unset the GLOB_DOTS options (the default is unset)
   unsetopt GLOB_DOTS

   #  If there is no tmpfile created, then unset the variable and exit
   [[ ! -e $tmpfile ]] && unset tmpfile && return 0; 

   #  Change the field delimiter (between size and file/dir name) to
   #  ':' This ensures that there are no problems displaying files or
   #  directories with a space in the name
   
   sed -i -e 's/^\([0-9]*\)[ \t]*/\1:/' $tmpfile

   #  Delete the entire line for current directory and move the
   #  beginning of the next line
   
   echo -e "\033[2K\033[E"
   
   cat $tmpfile | sort -n | \
   awk -F ":" '					\
      function get_colour(size_in_kb)		\
      {						\
         s = size_in_kb;				\
	 if (s < 1000) return "34";		\
	 if (s < 10*1024) return "70";			\
	 if (s < 25*1024) return "106";		\
	 if (s < 50*1024) return "148";		\
	 if (s < 100*1024) return "184";		\
	 if (s < 200*1024) return "178";			\
	 if (s < 500*1024) return "172";		\
	 if (s < 750*1024) return ""208;		\
	 if (s < 1000*1024) return "202";		\

      }	       	       	      			\
      BEGIN { total_size=0;}             \
      {     						\
      reset_color = "\033[0m"; 			\
      color = "\033[38;5;" get_colour($1) "m";		\
      total_size += $1;                             \
      if ($1 < 1000) 				\
      {        					\
         units = "KB";				\
	 size=$1;				\
      }     	 				\
      else 					\
      {						\
         if ($1 < 1000000)			\
	 {  	  				\
	    units = "MB"; 			\
	    size = $1/1024;			\
	 }  	    				\
	 else 					\
	 {					\
	    units = "GB"; 			\
	    size = $1/1024/1024; 		\
	    color = "\033[38;5;196m \033[1m";		\
	 }  	    				\
      }  					\
      						\
      printf "%s%.3f %s\t%s%s\n",color,size,units,$2,reset_color; \
   }    \
   END { \
      reset_color = "\033[0m"; 			\
      color = "\033[38;5;" get_colour($1) "m";		\
        if (total_size < 1000) 				\
      {        					\
         units = "KB";				\
	 size=total_size;				\
      }     	 				\
      else 					\
      {						\
         if (total_size < 1000000)			\
	 {  	  				\
	    units = "MB"; 			\
	    size = total_size/1024;			\
	 }  	    				\
	 else 					\
	 {					\
	    units = "GB"; 			\
	    size = total_size/1024/1024; 		\
	    color = "\033[38;5;196m \033[1m";		\
	 }  	    				\
      }  					\
   printf "%s*     *     *     *     *     *     *\n",color;  \
      printf "%s%.3f %s\t%s%s\n",color,size,units,"Total Size",reset_color; \
   }
   '

  # Delete the temporary file and unset the variable 

  #echo "Removing the temporary file"
#  echo rm $tmpfile
  rm $tmpfile
  unset tmpfile
}
